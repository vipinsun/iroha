## DO NOT EDIT
## Generated from build-iroha1.src.yml with make-workflows.sh

name: Iroha1
## TODO 1. [vcpkg] build only Debug or only Release - reduce vcpkg build duration and output size 2times
##         see directory triplets/, `vcpkg help triplets` and link: https://stackoverflow.com/a/52781832/3743145
## TODO 2. [vcpkg] Do not rebuild vcpkg-tool every time [takes about 1min], see build_iroha_deps.sh
## TODO 3. [vcpkg] Use binarycaching on CI https://devblogs.microsoft.com/cppblog/vcpkg-accelerate-your-team-development-environment-with-binary-caching-and-manifests/
## TODO 3. [speed] better caching utilizing diff-backup style tools like restic and rclone
##         to improve performance and reduce storage consumption.
##         Store ccache with rclone, maybe Store vcpkg binarycache with rclone
##         The problem/pitfail is to get access token during build from fork
## TODO 4. [speed] Self-hosted MacOS and Windows
##         Need more powerful Mac machine to reduce build time from 40min to 10min with hot vcpkg cache,
##                                                         and from 2hrs to 27min without cache
##         GitHub's default runners also idles much time before started
## TODO 5. [speed] Cancel previous runs if their duration is less than 10 minutes, protect almost done builds from being killed
## FIXME 8. [organization] cannot push docker image iroha-builder without credentials when PR is from fork.
##       Because GitHub secrets inaccessable when building PRs from public forks.
##       Solution: open PR from the same repo. (Noted in job as Possible WARNING)
## FIXME 9. [organization] change :container: to hyperledger/iroha-builder after first one pushed instead of ikyb/iroha-builder
## TODO [speed] cache between builds -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
## TODO [prettify,documentation] update status badges in README.md
## TODO [testing] windows postgres ctest
## TODO [code-style] remove useless outdated files
## TODO [legacy] Fix Jenkins pipeline
## TODO copy terraform to devops's repo

## CHEAT SHEET
## ${{ github.event.pull_request.head.repo.fork }}   ## check if PR head repo is fork
## ternary ${{ fromJSON('["no", "yes"]')[github.ref != 'refs/heads/master'] }}
on:
  push:
    branches: [main, support/1.*, test-ci]
    tags: ['v*']
  pull_request:
    branches: [main, support/1.*, test-ci] ## target branches
  workflow_dispatch:
    ## NOTE: Able to run via cmdline: gh workflow run Iroha1
    inputs:
      whatever:
        description: 'some-string.'
        required: true
        default: 'hello world!'
  issue_comment:
    types: [created, edited]
  schedule:
    - cron: '12 22 * * *'
jobs:
  pr_comment_reaction_rocket:
    ## Just to react to valid comment with rocket
    runs-on: ubuntu-latest
    if: ${{ github.event.comment && github.event.issue.pull_request && startsWith(github.event.comment.body, '/build') }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - name: Reaction
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"
  Docker-iroha-builder:
    # ## Check if PR same repo, so GitHub secrets are available, without them nothing to do
    # if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
    # runs-on: ubuntu-latest
    runs-on: [self-hosted, Linux]
    # continue-on-error: true  ##FIXME  ##Sets needs.job_id.result always to success
    env:
      DOCKERHUB_ORG: iroha1 ##ToDo hypeledger   #cannot use ${{ secrets.DOCKERHUB_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - if: ${{false}} ## TODO FIXME this must not cancel scheduled and manual runs, and almost finished runs
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ github.token }}
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1;
            /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
        #  ccache --show-stats
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: Determine dockertag
        id: dockertag
        env:
          dockertag: ${{ hashFiles('docker/iroha-builder/**') }}
        run: |
          echo "::set-output name=dockertag::$dockertag"
          echo >>$GITHUB_ENV  dockertag=$dockertag
          test -n "$DOCKERHUB_ORG" || {
            echo ::error::"DOCKERHUB_ORG must contain value"
            false
          }
      - name: Login to DockerHub
        if: ${{ env.DOCKERHUB_TOKEN != '' && env.DOCKERHUB_USERNAME != '' }}
        id: docker_login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Possible WARNING
        if: ${{ steps.docker_login.outcome == 'skipped' }}
        run: echo "::warning::DOCKERHUB_TOKEN and DOCKERHUB_USERNAME are empty. Will build but NOT push."
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKERHUB_ORG }}/iroha-builder
          tags: |
            type=raw,value=${{env.dockertag}}
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=schedule
            type=edge,branch=support/1.2.x
          #flavor: prefix=builder-  ## In case creating repository hyperledger/iroha-builder denied, Use tag prefix hyperledger/iroha:builder-xxxx
        ## Docker image will be pushed with tags:
        ##  - hash of file Dockerfile.builder
        ##  - branchname, when branch is pushed
        ##  - pr-NUMBER, when pushed to PR
        ##  - git tag when tag is pushed
        ##  - semver like 1.2.3 and 1.2 when tag vX.X.X is pushed
        ##  - tag 'edge' when branch support/1.2.x is pushed
        ##  - schedule, see the docs
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{env.dockertag}}
          restore-keys: ${{ runner.os }}-buildx-
      - id: build_and_push
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: docker/iroha-builder/
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: ${{ steps.docker_login.outcome == 'success' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Check if dockertaghash exists in remote registry
        id: dockertag_already
        run: |
          exists=$( curl -fL https://hub.docker.com/v2/repositories/$DOCKERHUB_ORG/iroha-builder/tags |
            jq 'any( .results[]|.name == "${{env.dockertag}}" ; .)' )
          echo "::set-output name=exists::$exists"

          if test $exists = true ;then
            tag=$dockertag
          else
            tag=edge
          fi
          container="$DOCKERHUB_ORG/iroha-builder:$tag"
          echo "::set-output name=container::$container"
          echo "::set-output name=container_tag::$tag"
    outputs:
      ## WARN secret dropped from output!, output may not contain secret,
      ## and secret cannot be used in job:container directly, and there is no github non-secret variables...
      ## if dockertag is already pushed then use it. But let it be empty when tag does not exist remotely.
      dockertag: ${{steps.dockertag.outputs.dockertag}}
      _dockertag: :${{steps.dockertag.outputs.dockertag}}
      # login_failed: ${{steps.login_failed.outputs.result}}
      pushed: ${{ steps.docker_login.outcome == 'success' && steps.build_and_push.outcome == 'success' }}
      dockertag_already_exists: ${{steps.dockertag_already.outputs.exists}}
      container: ${{steps.dockertag_already.outputs.container}}
      container_tag: ${{steps.dockertag_already.outputs.container_tag}}
  ## Build in a docker container
  build-iroha-ubuntu-debug:
    needs: Docker-iroha-builder
    runs-on: [self-hosted, Linux] #ubuntu-latest
    ## Container is taken from previous job
    container: ${{needs.Docker-iroha-builder.outputs.container}}
    # container: &container
    #   ${{ fromJSON( format('["iroha1", "{0}"]', needs.Docker-iroha-builder.outputs.DOCKERHUB_ORG)
    #                         )[needs.Docker-iroha-builder.outputs.DOCKERHUB_ORG != ''] }}/iroha-builder${{
    #                         fromJSON(format('[":edge", "{0}"]', needs.Docker-iroha-builder.outputs._dockertag)
    #                         )[needs.Docker-iroha-builder.outputs._dockertag != ''] }}
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc-9] #, gcc-10, clang-10 ]
        CMAKE_USE: ['', -DUSE_BURROW=ON, -DUSE_URSA=ON]
        build_type: [Debug]
        # include:
        #   - { build_type: Release, cc: gcc-9 }
        #   - { build_type: Release, cc: gcc-9, CMAKE_USE: -DUSE_BURROW=ON }
    # env:
    #   VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - name: Show needs
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(needs) }}
          END
      - run: test -n "$container"
        env:
          container: ${{needs.Docker-iroha-builder.outputs.container}}
      - # if: ${{ (needs.Docker-iroha-builder.result != 'success' || needs.Docker-iroha-builder.outputs.login_failed == 'true') &&
        #          needs.Docker-iroha-builder.outputs._dockertag == '' }}
        if: ${{ needs.Docker-iroha-builder.outputs.container_tag != needs.Docker-iroha-builder.outputs.dockertag || needs.Docker-iroha-builder.outputs.container == '' }}
        name: Possible WARNING
        env:
          container: ${{needs.Docker-iroha-builder.outputs.container}}
          dockertag: ${{needs.Docker-iroha-builder.outputs.dockertag}}
        run: |
          cat <<END
            ::warning::Running on container '$container', YOUR CHANGES TO Dockerfile.builder WERE NOT APPLYED.

            It seems container with tag '$dockertag' was not push to registry and does not exist remotely.
            The most possible reason is GitHub secrets are inaccessable to PRs from public forks.

            $(test ${{github.event.pull_request.head.repo.full_name}} != ${{github.event.pull_request.base.repo.full_name}} \
              && echo -n "SECRETS ARE NOT EXPOSED TO FORKS" || echo -n "SECRETS AVAILABLE")

            **Consider to open PR from the same organization.**

            What we know about this build:
              - PR URL is ${{github.event.pull_request.html_url}}
              - head repo is '${{github.event.pull_request.head.repo.full_name}}'
              - base repo is '${{github.event.pull_request.base.repo.full_name}}'
              - See more information in previous step 'Show context'

            Please ask @kuvaldini on GitHub or in Telegram if you need help.
          END
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1;
            /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
        #  ccache --show-stats
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: export CC and CXX
        run: "set -xeu   #o pipefail\nif test $CC = llvm ;then CC=/usr/local/opt/llvm/bin/clang ;fi\necho >>$GITHUB_ENV CC=$CC                                               \necho >>$GITHUB_ENV CXX=$(echo $CC | sed -es,gcc,g++, -es,clang,clang++,)\necho >>$GITHUB_PATH $CCACHE_PATH\nls -lA $CCACHE_PATH\n$(realpath $CCACHE_PATH/cc) --show-config\necho >>$GITHUB_ENV _CCACHE_DIR=$($(realpath $CCACHE_PATH/cc) --show-config | sed -nE 's,.*cache_dir = ,,p')\n"
        env:
          CC: ${{matrix.cc}}
          CCACHE_PATH: /usr/lib/ccache
      - name: Restore cache ccache
        uses: actions/cache@v2
        with:
          path: ${{ env._CCACHE_DIR }}
          key: ${{ runner.os }}-ccache
      - if: ${{false}} ## This works bad when something patched or something updated, seems they does not recalc hash of changed packages. See todos in the begining of file.
        ## Read the docs https://vcpkg.readthedocs.io/en/latest/users/binarycaching/ https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Restore cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.HOME }}/.cache/vcpkg/archives
          #  $HOME/.cache/vcpkg
          #  build-vcpkg/installed
          #  build/vcpkg_installed    ## This is default folder for manual installation in manifest mode
          key: ${{ runner.os }}-${{matrix.cc}}-vcpkg
          # key:          ${{ runner.os }}-vcpkg-${{matrix.cc}}-${{ hashFiles('build-vcpkg/installed/vcpkg/status') }}
          # restore-keys: ${{ runner.os }}-vcpkg-${{matrix.cc}}-
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg; test -f $PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake
        ## Takes 48m16s on default GitHub runner with 2 cores
        ## Takes 13m41s on self-hosted AWS EC2 c5.x4large
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}  $(test ${{matrix.build_type}} = Release && echo -DPACKAGE_DEB=ON)
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: |
          set -x
          cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
          if test ${{matrix.build_type}} = 'Release' ;then ( cd build; cpack; ) ;fi
        ## Debug   takes 18m44s on regular GitHub runner
        ## Debug   takes 7m41s on self-hosted AWS EC2 c5.x4large
        ## Release takes 2m58s on self-hosted AWS EC2 c5.x4large
      - name: Show free space and disk usage
        if: ${{ always() }}
        run: |
          df -h || true
      - name: Generate artifact suffix depending on matrix
        run: |
          cc=$(echo $cc | sed -Ee's,[-/],,g' )
          build_type=$(echo $build_type | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, )
          uses=$(echo $CMAKE_USE |
            tr ' ' '\n' | sed -nE -e's,.*USE_([a-zA-Z]+)=ON.*,\1,gp ; s, ,-, ;' | xargs | tr ' ' - | tr A-Z a-z )
          echo >>$GITHUB_ENV  ARTIFACT_SUFFIX=-$os${cc:+-$cc}${build_type:+-$build_type}${uses:+-$uses}
          echo >>$GITHUB_ENV  USES_SUFFIX=${uses:+-$uses}
        env:
          os: ubuntu ## maybe ${{ run.os }}
          cc: ${{ matrix.cc }}
          build_type: ${{ matrix.build_type }}
          CMAKE_USE: ${{ matrix.CMAKE_USE }}
      - name: Upload artifact irohad
        uses: actions/upload-artifact@v2
        with:
          name: irohad${{env.ARTIFACT_SUFFIX}}
          path: |
            build/bin/irohad
            build/bin/iroha-cli
      - if: ${{ matrix.build_type == 'Release' }}
        name: Upload artifact iroha-deb
        uses: actions/upload-artifact@v2
        with:
          name: iroha-deb${{env.ARTIFACT_SUFFIX}}
          path: |
            build/*.deb
      - if: ${{ false }} ## Maybe test in another job
        name: Upload artifact tests
        uses: actions/upload-artifact@v2
        with:
          name: iroha-tests-ubuntu${{env.ARTIFACT_SUFFIX}}
          path: |
            build/test_bin/**
            build/test_data/**
      - timeout-minutes: 10
        name: CTest, FIXME integration_fake_peer_example_test
        run: |
          set -x
          initdb --locale=C -E UTF-8 $PWD/postgres_database
          postgres -D $PWD/postgres_database -p5432 & { sleep .3; kill -0 $!; }  ## use pg_ctl no need &
          createuser -s postgres -p5432

          cd build
          ##FIXME enable yac when it were fixed lag
          ctest --output-on-failure -R '^module_' --parallel 4 --exclude-regex yac_
          ctest --output-on-failure -R '^module_yac_'
          ctest --output-on-failure -R '^integration_' --repeat until-pass:3 -E '^integration_fake_peer_example_test$'
          ctest --output-on-failure -R '^integration_fake_peer_example_test$' || true
        #FIXME do not CTEST_EXCLUDE
  build-iroha-ubuntu-release:
    needs: Docker-iroha-builder
    runs-on: [self-hosted, Linux] #ubuntu-latest
    ## Container is taken from previous job
    container: ${{needs.Docker-iroha-builder.outputs.container}}
    # env:
    #   VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - name: Show needs
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(needs) }}
          END
      - run: test -n "$container"
        env:
          container: ${{needs.Docker-iroha-builder.outputs.container}}
      - # if: ${{ (needs.Docker-iroha-builder.result != 'success' || needs.Docker-iroha-builder.outputs.login_failed == 'true') &&
        #          needs.Docker-iroha-builder.outputs._dockertag == '' }}
        if: ${{ needs.Docker-iroha-builder.outputs.container_tag != needs.Docker-iroha-builder.outputs.dockertag || needs.Docker-iroha-builder.outputs.container == '' }}
        name: Possible WARNING
        env:
          container: ${{needs.Docker-iroha-builder.outputs.container}}
          dockertag: ${{needs.Docker-iroha-builder.outputs.dockertag}}
        run: |
          cat <<END
            ::warning::Running on container '$container', YOUR CHANGES TO Dockerfile.builder WERE NOT APPLYED.

            It seems container with tag '$dockertag' was not push to registry and does not exist remotely.
            The most possible reason is GitHub secrets are inaccessable to PRs from public forks.

            $(test ${{github.event.pull_request.head.repo.full_name}} != ${{github.event.pull_request.base.repo.full_name}} \
              && echo -n "SECRETS ARE NOT EXPOSED TO FORKS" || echo -n "SECRETS AVAILABLE")

            **Consider to open PR from the same organization.**

            What we know about this build:
              - PR URL is ${{github.event.pull_request.html_url}}
              - head repo is '${{github.event.pull_request.head.repo.full_name}}'
              - base repo is '${{github.event.pull_request.base.repo.full_name}}'
              - See more information in previous step 'Show context'

            Please ask @kuvaldini on GitHub or in Telegram if you need help.
          END
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1;
            /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
        #  ccache --show-stats
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: export CC and CXX
        run: "set -xeu   #o pipefail\nif test $CC = llvm ;then CC=/usr/local/opt/llvm/bin/clang ;fi\necho >>$GITHUB_ENV CC=$CC                                               \necho >>$GITHUB_ENV CXX=$(echo $CC | sed -es,gcc,g++, -es,clang,clang++,)\necho >>$GITHUB_PATH $CCACHE_PATH\nls -lA $CCACHE_PATH\n$(realpath $CCACHE_PATH/cc) --show-config\necho >>$GITHUB_ENV _CCACHE_DIR=$($(realpath $CCACHE_PATH/cc) --show-config | sed -nE 's,.*cache_dir = ,,p')\n"
        env:
          CC: ${{matrix.cc}}
          CCACHE_PATH: /usr/lib/ccache
      - name: Restore cache ccache
        uses: actions/cache@v2
        with:
          path: ${{ env._CCACHE_DIR }}
          key: ${{ runner.os }}-ccache
      - if: ${{false}} ## This works bad when something patched or something updated, seems they does not recalc hash of changed packages. See todos in the begining of file.
        ## Read the docs https://vcpkg.readthedocs.io/en/latest/users/binarycaching/ https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Restore cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.HOME }}/.cache/vcpkg/archives
          #  $HOME/.cache/vcpkg
          #  build-vcpkg/installed
          #  build/vcpkg_installed    ## This is default folder for manual installation in manifest mode
          key: ${{ runner.os }}-${{matrix.cc}}-vcpkg
          # key:          ${{ runner.os }}-vcpkg-${{matrix.cc}}-${{ hashFiles('build-vcpkg/installed/vcpkg/status') }}
          # restore-keys: ${{ runner.os }}-vcpkg-${{matrix.cc}}-
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg; test -f $PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake
        ## Takes 48m16s on default GitHub runner with 2 cores
        ## Takes 13m41s on self-hosted AWS EC2 c5.x4large
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}  $(test ${{matrix.build_type}} = Release && echo -DPACKAGE_DEB=ON)
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: |
          set -x
          cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
          if test ${{matrix.build_type}} = 'Release' ;then ( cd build; cpack; ) ;fi
        ## Debug   takes 18m44s on regular GitHub runner
        ## Debug   takes 7m41s on self-hosted AWS EC2 c5.x4large
        ## Release takes 2m58s on self-hosted AWS EC2 c5.x4large
      - name: Show free space and disk usage
        if: ${{ always() }}
        run: |
          df -h || true
      - name: Generate artifact suffix depending on matrix
        run: |
          cc=$(echo $cc | sed -Ee's,[-/],,g' )
          build_type=$(echo $build_type | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, )
          uses=$(echo $CMAKE_USE |
            tr ' ' '\n' | sed -nE -e's,.*USE_([a-zA-Z]+)=ON.*,\1,gp ; s, ,-, ;' | xargs | tr ' ' - | tr A-Z a-z )
          echo >>$GITHUB_ENV  ARTIFACT_SUFFIX=-$os${cc:+-$cc}${build_type:+-$build_type}${uses:+-$uses}
          echo >>$GITHUB_ENV  USES_SUFFIX=${uses:+-$uses}
        env:
          os: ubuntu ## maybe ${{ run.os }}
          cc: ${{ matrix.cc }}
          build_type: ${{ matrix.build_type }}
          CMAKE_USE: ${{ matrix.CMAKE_USE }}
      - name: Upload artifact irohad
        uses: actions/upload-artifact@v2
        with:
          name: irohad${{env.ARTIFACT_SUFFIX}}
          path: |
            build/bin/irohad
            build/bin/iroha-cli
      - if: ${{ matrix.build_type == 'Release' }}
        name: Upload artifact iroha-deb
        uses: actions/upload-artifact@v2
        with:
          name: iroha-deb${{env.ARTIFACT_SUFFIX}}
          path: |
            build/*.deb
      - if: ${{ false }} ## Maybe test in another job
        name: Upload artifact tests
        uses: actions/upload-artifact@v2
        with:
          name: iroha-tests-ubuntu${{env.ARTIFACT_SUFFIX}}
          path: |
            build/test_bin/**
            build/test_data/**
      - timeout-minutes: 10
        name: CTest, FIXME integration_fake_peer_example_test
        run: |
          set -x
          initdb --locale=C -E UTF-8 $PWD/postgres_database
          postgres -D $PWD/postgres_database -p5432 & { sleep .3; kill -0 $!; }  ## use pg_ctl no need &
          createuser -s postgres -p5432

          cd build
          ##FIXME enable yac when it were fixed lag
          ctest --output-on-failure -R '^module_' --parallel 4 --exclude-regex yac_
          ctest --output-on-failure -R '^module_yac_'
          ctest --output-on-failure -R '^integration_' --repeat until-pass:3 -E '^integration_fake_peer_example_test$'
          ctest --output-on-failure -R '^integration_fake_peer_example_test$' || true
        #FIXME do not CTEST_EXCLUDE
    strategy:
      fail-fast: false
      matrix:
        include:
          - {build_type: Release, cc: gcc-9}
          - {build_type: Release, cc: gcc-9, CMAKE_USE: -DUSE_BURROW=ON}
        # cc:         [ gcc-9 ] #, gcc-10, clang-10 ]
        # CMAKE_USE:  [ '', -DUSE_BURROW=ON ]
        # build_type: [ Release ]
  build-iroha-macos:
    runs-on: macos-latest #[ self-hosted, MacOS ] #
    strategy:
      fail-fast: false
      matrix:
        cc: [clang] #, llvm ] #gcc-10
        # os: [ macos-latest, macos-11.0, macos-10.15 ]
        CMAKE_USE: ['', -DUSE_BURROW=ON, -DUSE_URSA=ON]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [Debug] #,Release, RelWithDebInfo
    # ## For pull_request run only Apple-clang, no llvm
    # if: ${{ ! (github.event_name == 'pull_request' && matrix.cc == 'clang') }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - if: ${{false}} ## TODO FIXME this must not cancel scheduled and manual runs, and almost finished runs
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ github.token }}
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1;
            /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
        #  ccache --show-stats
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: Homebrew
        run: brew install cmake ninja coreutils ccache
        ## Takes 22 seconds with default github runner
      - if: ${{ contains(matrix.cc, 'gcc-10') }}
        name: Homebrew GCC
        run: brew install gcc@10
      - if: ${{ contains(matrix.cc, 'llvm') }}
        name: Homebrew LLVM
        run: brew install llvm
      - if: ${{ contains(matrix.CMAKE_USE, '-DUSE_BURROW=ON') }}
        name: Install protoc-gen-go for -DUSE_BURROW=ON
        run: |
          go get github.com/golang/protobuf/protoc-gen-go
          echo >>$GITHUB_PATH $HOME/go/bin
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: export CC and CXX
        run: "set -xeu   #o pipefail\nif test $CC = llvm ;then CC=/usr/local/opt/llvm/bin/clang ;fi\necho >>$GITHUB_ENV CC=$CC                                               \necho >>$GITHUB_ENV CXX=$(echo $CC | sed -es,gcc,g++, -es,clang,clang++,)\necho >>$GITHUB_PATH $CCACHE_PATH\nls -lA $CCACHE_PATH\n$(realpath $CCACHE_PATH/cc) --show-config\necho >>$GITHUB_ENV _CCACHE_DIR=$($(realpath $CCACHE_PATH/cc) --show-config | sed -nE 's,.*cache_dir = ,,p')\n"
        env:
          CC: ${{matrix.cc}}
          CCACHE_PATH: /usr/local/opt/ccache/libexec
      - name: Restore cache ccache
        uses: actions/cache@v2
        with:
          path: ${{ env._CCACHE_DIR }}
          key: ${{ runner.os }}-ccache
      - if: ${{false}} ## This works bad when something patched or something updated, seems they does not recalc hash of changed packages. See todos in the begining of file.
        ## Read the docs https://vcpkg.readthedocs.io/en/latest/users/binarycaching/ https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Restore cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.HOME }}/.cache/vcpkg/archives
          #  $HOME/.cache/vcpkg
          #  build-vcpkg/installed
          #  build/vcpkg_installed    ## This is default folder for manual installation in manifest mode
          key: ${{ runner.os }}-${{matrix.cc}}-vcpkg
          # key:          ${{ runner.os }}-vcpkg-${{matrix.cc}}-${{ hashFiles('build-vcpkg/installed/vcpkg/status') }}
          # restore-keys: ${{ runner.os }}-vcpkg-${{matrix.cc}}-
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg; test -f $PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake
        ## Takes 48m16s on default GitHub runner with 2 cores
        ## Takes 13m41s on self-hosted AWS EC2 c5.x4large
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}  $(test ${{matrix.build_type}} = Release && echo -DPACKAGE_DEB=ON)
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: |
          set -x
          cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
          if test ${{matrix.build_type}} = 'Release' ;then ( cd build; cpack; ) ;fi
        ## Debug   takes 18m44s on regular GitHub runner
        ## Debug   takes 7m41s on self-hosted AWS EC2 c5.x4large
        ## Release takes 2m58s on self-hosted AWS EC2 c5.x4large
      - name: Show free space and disk usage
        if: ${{ always() }}
        run: |
          df -h || true
      - run: |
          cc=$(echo $cc | sed -Ee's,[-/],,g' )
          build_type=$(echo $build_type | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, )
          uses=$(echo $CMAKE_USE |
            tr ' ' '\n' | sed -nE -e's,.*USE_([a-zA-Z]+)=ON.*,\1,gp ; s, ,-, ;' | xargs | tr ' ' - | tr A-Z a-z )
          echo >>$GITHUB_ENV  ARTIFACT_SUFFIX=-$os${cc:+-$cc}${build_type:+-$build_type}${uses:+-$uses}
          echo >>$GITHUB_ENV  USES_SUFFIX=${uses:+-$uses}
        name: Generate artifact suffix gcc9 >> env.ARTIFACT_SUFFIX
        #run: inherited
        env:
          cc: ${{ matrix.cc }}
          build_type: ${{ matrix.build_type }}
          CMAKE_USE: ${{ matrix.CMAKE_USE }}
          os: macos ##${{run.os}}
      - name: Upload artifact irohad
        uses: actions/upload-artifact@v2
        with:
          name: irohad-macos${{env.ARTIFACT_SUFFIX}}
          path: |
            build/bin/irohad
            build/bin/iroha-cli
      - if: ${{ false }} ## Maybe test in another job
        name: Upload artifact tests
        uses: actions/upload-artifact@v2
        with:
          name: iroha-tests-ubuntu${{env.ARTIFACT_SUFFIX}}
          path: |
            build/test_bin/**
            build/test_data/**
      - name: Install Postgres on MacOS
        run: brew install postgresql
        ## ToDo may be optimize, i.e. cache package
      - timeout-minutes: 10
        name: CTest, FIXME integration_fake_peer_example_test
        run: |
          set -x
          initdb --locale=C -E UTF-8 $PWD/postgres_database
          postgres -D $PWD/postgres_database -p5432 & { sleep .3; kill -0 $!; }  ## use pg_ctl no need &
          createuser -s postgres -p5432

          cd build
          ##FIXME enable yac when it were fixed lag
          ctest --output-on-failure -R '^module_' --parallel 4 --exclude-regex yac_
          ctest --output-on-failure -R '^module_yac_'
          ctest --output-on-failure -R '^integration_' --repeat until-pass:3 -E '^integration_fake_peer_example_test$'
          ctest --output-on-failure -R '^integration_fake_peer_example_test$' || true
        #FIXME do not CTEST_EXCLUDE
  build-iroha-windows:
    if: ${{ false }} ##FIXME Somehow cmake fails to find GTest and others
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug] #,Release, RelWithDebInfo
    defaults:
      run:
        shell: bash #pwshdefaults:
        working-directory: 'C:\github\iroha' ## Use disk C: because D: is out of space
    steps:
      - name: Create working-directory, export WORKDIR
        run: |
          set -x
          mkdir -p "$WORKDIR"
          echo $PWD
          echo >>$GITHUB_ENV WORKDIR="$WORKDIR"
        working-directory: 'C:\'
        env: {WORKDIR: 'C:\github\iroha'}
      - name: uname in bash
        run: uname
        shell: bash
      - name: uname in [default] pwsh shell
        run: uname
        shell: pwsh
      - name: Chocolatey install
        run: choco install cmake ninja #ccache
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: move to workdir
        run: |
          set -x
          echo $PWD
          shopt -s dotglob nullglob
          mv -vf *  -t "$WORKDIR"
        working-directory:
      #- *step_restore_ccache
      #- *step_vcpkg_cache
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg; test -f $PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake
        ## Takes 48m16s on default GitHub runner with 2 cores
        ## Takes 13m41s on self-hosted AWS EC2 c5.x4large
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}  $(test ${{matrix.build_type}} = Release && echo -DPACKAGE_DEB=ON)
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: |
          set -x
          cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
          if test ${{matrix.build_type}} = 'Release' ;then ( cd build; cpack; ) ;fi
        ## Debug   takes 18m44s on regular GitHub runner
        ## Debug   takes 7m41s on self-hosted AWS EC2 c5.x4large
        ## Release takes 2m58s on self-hosted AWS EC2 c5.x4large
      - name: Show free space and disk usage
        if: ${{ always() }}
        run: |
          df -h || true
      - name: Install Postgres on Windows
        run: choco install postgresql
    # - *step_ctest
  release-iroha-docker-image:
    needs: build-iroha-ubuntu-release
    runs-on: [self-hosted, Linux] ## or ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - {build_type: Release, cc: gcc-9}
          - {build_type: Release, cc: gcc-9, CMAKE_USE: -DUSE_BURROW=ON}
        # cc:         [ gcc-9 ] #, gcc-10, clang-10 ]
        # CMAKE_USE:  [ '', -DUSE_BURROW=ON ]
        # build_type: [ Release ]
    #if: matrix.dockerpush == '' || matrix.dockerpush == 'yes'
    env:
      DOCKERHUB_ORG: iroha1 ##ToDo hypeledger   #cannot use ${{ secrets.DOCKERHUB_ORG }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1;
            /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
        #  ccache --show-stats
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: Generate artifact suffix depending on matrix
        run: |
          cc=$(echo $cc | sed -Ee's,[-/],,g' )
          build_type=$(echo $build_type | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, )
          uses=$(echo $CMAKE_USE |
            tr ' ' '\n' | sed -nE -e's,.*USE_([a-zA-Z]+)=ON.*,\1,gp ; s, ,-, ;' | xargs | tr ' ' - | tr A-Z a-z )
          echo >>$GITHUB_ENV  ARTIFACT_SUFFIX=-$os${cc:+-$cc}${build_type:+-$build_type}${uses:+-$uses}
          echo >>$GITHUB_ENV  USES_SUFFIX=${uses:+-$uses}
        env:
          os: ubuntu ## maybe ${{ run.os }}
          cc: ${{ matrix.cc }}
          build_type: ${{ matrix.build_type }}
          CMAKE_USE: ${{ matrix.CMAKE_USE }}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: iroha-deb${{env.ARTIFACT_SUFFIX}}
      - name: Rename artifact debs
        run: |
          mv *iroha_shepherd.deb docker/release/iroha_shepherd.deb
          mv *irohad.deb         docker/release/iroha.deb
      - name: Determine dockertag
        id: dockertag
        run: |
          echo "::set-output name=dockertag::$dockertag"
          echo >>$GITHUB_ENV  dockertag=$dockertag
          test -n "$DOCKERHUB_ORG" || {
            echo ::error::"DOCKERHUB_ORG must contain value"
            false
          }
        env:
          dockertag: ${{ hashFiles('docker/release/**') }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          tags: |
            type=raw,value=${{env.dockertag}}
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=schedule
            type=edge,branch=support/1.2.x
          #flavor: prefix=builder-  ## In case creating repository hyperledger/iroha-builder denied, Use tag prefix hyperledger/iroha:builder-xxxx

          images: ${{ env.DOCKERHUB_ORG }}/iroha${{ env.USES_SUFFIX }} ## uses suffecs could be empty, -burrow, -ursa
          #maybetodo flavor: prefix=${{ env.USES_PREFIX }}  ## In case creating repository hyperledger/iroha-burrow denied, Use tag prefix hyperledger/iroha:burrow-xxxx
      - name: Login to DockerHub
        if: ${{ env.DOCKERHUB_TOKEN != '' && env.DOCKERHUB_USERNAME != '' }}
        id: docker_login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Possible WARNING
        if: ${{ steps.docker_login.outcome == 'skipped' }}
        run: echo "::warning::DOCKERHUB_TOKEN and DOCKERHUB_USERNAME are empty. Will build but NOT push."
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release-${{env.dockertag}}
          restore-keys: ${{ runner.os }}-buildx-release
      - id: build_and_push
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: docker/release/
          push: ${{ steps.docker_login.outcome == 'success' }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
